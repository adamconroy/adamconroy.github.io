{"version":3,"sources":["ChessPiece.js","App.js","serviceWorker.js","index.js"],"names":["ChessPiece","name","split","map","word","charAt","toUpperCase","slice","join","chess","this","props","react_default","a","createElement","className","alt","src","cleanName","species","class","cost","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","classes","costs","b","_this2","fetch","then","response","json","setState","sort","sortData","loadData","selected_chess","chess1","chess2","some","s","includes","hasClassSynergy","hasSpeciesSynergy","_this3","_this$state","selected_chess_div","src_ChessPiece","onClick","species_pieces","key","onChessPieceClick","classes_pieces","all_pieces","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13825ba7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ChessPiece extends Component {\r\n  cleanName(name) {\r\n    return name.split('_').map(word => {\r\n      return word.charAt(0).toUpperCase() + word.slice(1);\r\n    }).join(' ');\r\n  }\r\n\r\n  render() {\r\n    const { chess } = this.props;\r\n\r\n    if (chess == null) return null;\r\n\r\n    return (\r\n      <div className={'chess_piece'}>\r\n        <div className={'small_icon_container'}>\r\n          <img alt={chess.chess} src={'./icon/' + chess.chess + '_icon.png'} />\r\n        </div>\r\n        <div>{this.cleanName(chess.chess)}</div>\r\n        <div className={'specie_' + chess.species}>{chess.species}</div>\r\n        <div className={'class_' + chess.class}>{chess.class}</div>\r\n        <div>{chess.cost}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ChessPiece;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ChessPiece from './ChessPiece';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      species: null,\n      classes: null,\n      costs: null\n    };\n  }\n\n  sortData(a, b) {\n    if (a.chess.charAt(0) < b.chess.charAt(0)) return -1;\n    if (a.chess.charAt(0) > b.chess.charAt(0)) return 1;\n    return 0;\n  }\n\n  loadData() {\n    fetch('./units.json')\n      .then(response => response.json())\n      .then(data => this.setState({data: data.sort(this.sortData)}));\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  onChessPieceClick(selected_chess) {\n    this.setState({\n      selected_chess: selected_chess\n    });\n  }\n\n  hasClassSynergy(chess1, chess2) {\n    return chess1.chess !== chess2.chess && chess1.class === chess2.class;\n  }\n\n  hasSpeciesSynergy(chess1, chess2) {\n    return chess1.chess !== chess2.chess &&\n      chess1.species.some(s => chess2.species.includes(s));\n  }\n\n  hasSynergy(chess1, chess2) {\n    return this.hasClassSynergy(chess1, chess2) || this.hasSpeciesSynergy(chess1, chess2);\n  }\n\n  render() {\n    const { data, selected_chess } = this.state;\n\n    if (data == null) {\n      return null;\n    }\n\n    let selected_chess_div = selected_chess == null ? null : (\n      <div className={'selected_hero'}>\n        <ChessPiece chess={selected_chess} />\n        <button onClick={() => this.setState({selected_chess: null})}>\n          UNSELECT\n        </button>\n      </div>\n    );\n\n    let species_pieces  = selected_chess == null ? null : (\n      <div className={'hero_species'}>\n        <div>SPECIES</div>\n        {data.map(chess =>\n        selected_chess && !this.hasSpeciesSynergy(chess, selected_chess) ? null :\n          <div key={chess.chess + '_piece'} onClick={() => this.onChessPieceClick(chess)}>\n            <ChessPiece chess={chess} />\n          </div>\n        )}\n      </div>\n    );\n\n    let classes_pieces = selected_chess == null ? null : (\n      <div className={'hero_classes'}>\n        <div>CLASSES</div>\n        {data.map(chess =>\n          selected_chess && !this.hasClassSynergy(chess, selected_chess) ? null :\n            <div key={chess.chess + '_piece'} onClick={() => this.onChessPieceClick(chess)}>\n              <ChessPiece chess={chess} />\n            </div>\n        )}\n      </div>\n    );\n\n    let all_pieces = selected_chess != null ? null : (\n      <div className={'all_heroes'}>\n        {data.map(chess =>\n            <div key={chess.chess + '_piece'} onClick={() => this.onChessPieceClick(chess)}>\n              <ChessPiece chess={chess} />\n            </div>\n        )}\n      </div>\n    );\n\n    return (\n      <div className='App'>\n        <div className={'hero_viewer'}>\n          {selected_chess_div}\n          {species_pieces}\n          {classes_pieces}\n          {all_pieces}\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\n    <div className=\"App\">\n        <ChessViewer />\n    </div>\n */\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}